// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type Provider string

const (
	ProviderPHONE  Provider = "PHONE"
	ProviderGOOGLE Provider = "GOOGLE"
)

func (e *Provider) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Provider(s)
	case string:
		*e = Provider(s)
	default:
		return fmt.Errorf("unsupported scan type for Provider: %T", src)
	}
	return nil
}

type NullProvider struct {
	Provider Provider `json:"provider"`
	Valid    bool     `json:"valid"` // Valid is true if Provider is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullProvider) Scan(value interface{}) error {
	if value == nil {
		ns.Provider, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Provider.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullProvider) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Provider), nil
}

type User struct {
	ID             uuid.UUID        `json:"id"`
	Name           pgtype.Text      `json:"name"`
	Phone          pgtype.Text      `json:"phone"`
	Email          pgtype.Text      `json:"email"`
	Provider       Provider         `json:"provider"`
	ProfilePicture pgtype.Text      `json:"profile_picture"`
	Meta           []byte           `json:"meta"`
	CreatedAt      pgtype.Timestamp `json:"created_at"`
	UpdatedAt      pgtype.Timestamp `json:"updated_at"`
}
