// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: sso.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const findOrCreateUser = `-- name: FindOrCreateUser :one
INSERT INTO users (name, phone, email, provider, created_at, updated_at)
VALUES ($1, $2, $3, $4, NOW(), NOW())
ON CONFLICT (phone , email)
DO UPDATE SET 
  phone = COALESCE(NULLIF(EXCLUDED.phone, ''), users.phone),
  provider = EXCLUDED.provider,
  name = COALESCE(NULLIF(EXCLUDED.name, ''), users.name),
  updated_at = NOW()
RETURNING id, phone, email, name, provider
`

type FindOrCreateUserParams struct {
	Name     pgtype.Text `json:"name"`
	Phone    pgtype.Text `json:"phone"`
	Email    pgtype.Text `json:"email"`
	Provider Provider    `json:"provider"`
}

type FindOrCreateUserRow struct {
	ID       uuid.UUID   `json:"id"`
	Phone    pgtype.Text `json:"phone"`
	Email    pgtype.Text `json:"email"`
	Name     pgtype.Text `json:"name"`
	Provider Provider    `json:"provider"`
}

func (q *Queries) FindOrCreateUser(ctx context.Context, arg FindOrCreateUserParams) (FindOrCreateUserRow, error) {
	row := q.db.QueryRow(ctx, findOrCreateUser,
		arg.Name,
		arg.Phone,
		arg.Email,
		arg.Provider,
	)
	var i FindOrCreateUserRow
	err := row.Scan(
		&i.ID,
		&i.Phone,
		&i.Email,
		&i.Name,
		&i.Provider,
	)
	return i, err
}
